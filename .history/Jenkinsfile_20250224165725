pipeline {
    agent any

    tools {
        git 'git'
        maven 'maven'
    }

    environment {
        ARTIFACTORY_SERVER = 'Artifactory'
        CI = true
    }

    stages {
        stage('Source') {
            steps {
                git url: 'https://github.com/kparunsagar/pipeline_springboot.git'
            }
        }

        stage('Build') {
            steps {
                script {
                    def mvnHome = tool 'maven'
                    bat "${mvnHome}\\bin\\mvn -B verify"
                    echo "-----------Build started--------------"
                    sh 'mvn clean deploy -Dmaven.test.skip=true'
                    echo "-----------Build completed--------------"
                }
            }
        }

        // OWASP Dependency-Check
        stage('Dependency Check') {
            steps {
                script {
                    def mvnHome = tool 'maven'
                    echo "-----------OWASP Dependency-Check started--------------"
                    sh "'${mvnHome}/bin/mvn' dependency-check:check"
                    echo "-----------OWASP Dependency-Check completed--------------"
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    def mvnHome = tool 'maven'
                    echo "-----------Unit test started--------------"
                    sh 'mvn surefire-report:report'
                    echo "-----------Unit test completed--------------"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def mvnHome = tool 'maven'
                    withSonarQubeEnv() {
                        bat "${mvnHome}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=sts"
                    }
                }
            }
        }

        stage("Quality Gate") {
            timeout(time: 1, unit: 'HOURS') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }

        // Run Snyk Security Scan
        stage('RunSCAAnalysisUsingSnyk') {
            steps {
                withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                    echo "-----------Snyk scan started--------------"
                    sh 'mvn snyk:test -fn'  // This will trigger Snyk to check for vulnerabilities
                    echo "-----------Snyk scan completed--------------"
                }
            }
        }

        stage('Packaging') {
            steps {
                step([$class: 'ArtifactArchiver', artifacts: '**/target/*.jar', fingerprint: true])
            }
        }

        stage("Artifactory Publish") {
            steps {
                script {
                    def server = Artifactory.server 'artifactory'
                    def rtMaven = Artifactory.newMavenBuild()
                    rtMaven.deployer server: server, releaseRepo: 'demo_pipe_repo', snapshotRepo: 'demo_pipe_snap'
                    rtMaven.tool = 'maven'

                    def buildInfo = rtMaven.run pom: '$workspace/pom.xml', goals: 'clean install'
                    rtMaven.deployer.deployArtifacts = true
                    rtMaven.deployer.deployArtifacts buildInfo

                    server.publishBuildInfo buildInfo
                }
            }
        }
    }
}
